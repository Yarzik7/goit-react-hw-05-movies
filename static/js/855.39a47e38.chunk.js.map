{"version":3,"file":"static/js/855.39a47e38.chunk.js","mappings":"2LAUA,EARkB,SAAC,GAAuB,IAArBA,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,UACvB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAArB,SAA4BC,KAGjC,ECNKE,EAAY,SAAC,GAAD,IAAGH,EAAH,EAAGA,GAAII,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OAAyB,SAAC,EAAD,CAAoBL,GAAIA,EAAIC,UAAWG,GAASC,GAAhCL,EAAzC,EAMlB,EAJmB,SAAC,GAAgB,IAAdM,EAAa,EAAbA,OACpB,OAAO,wBAAKA,EAAOC,IAAIJ,IACxB,C,2GC4BD,EAhCkB,SAAC,GAA0B,IAAxBK,EAAuB,EAAvBA,iBACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAgBA,OACE,iBAAMC,SAba,SAAAC,GACnBA,EAAMC,iBAEDJ,EAAMK,QAKXP,EAAiBE,GACjBC,EAAS,KALPK,MAAM,kBAMT,EAGC,UACE,kBACEC,KAAK,OACLZ,KAAK,QACLa,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,SAtBoB,SAAC,GAAD,IAAoBC,EAApB,EAAGC,cAAiBD,MAApB,OAAkCX,EAASW,EAA3C,EAuBpBA,MAAOZ,KAId,E,oCC9BKc,EAAoB,CACxBC,QAAS,mCACTC,SAAU,QACVC,KAAM,EACNjB,MAAO,GACPkB,eAAe,GAGFC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBnB,GAAzB,8FAAgCiB,EAAhC,+BAAuC,EACrCH,EAAkBd,MAAQA,EAC1Bc,EAAkBG,KAAOA,EACnBG,EAAa,IAAIC,gBAAgBP,GAHzC,SAKyBQ,EAAAA,EAAAA,IAAA,uBAA0BF,IALnD,WAKQG,EALR,QAOgBC,KAAKC,QAAQC,OAP7B,yCAQWC,QAAQC,OAAO,IAAIC,MAAJ,8BAAiC7B,EAAjC,QAR1B,gCAWSuB,EAASC,KAAKC,SAXvB,oEAcA,MAtBA,SAQyB,GAAVN,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,QCqCf,EAzCmB,WAAO,IAAD,EACvB,GAAwBpB,EAAAA,EAAAA,UAAS,GAAjC,eAAOkB,EAAP,KAAaa,EAAb,KACA,GAA4B/B,EAAAA,EAAAA,UAAS,IAArC,eAAOH,EAAP,KAAemC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMlC,EAAK,UAAGiC,EAAaE,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACR,GAAKpC,EAAL,CAYAmB,EAAUnB,EAAOiB,GAAMoB,MARE,SAAAzC,GACvBmC,EAAUnC,EACX,IAM6C0C,OAJrB,SAAAC,GACvBC,QAAQC,IAAIF,EAAMG,QACnB,GARA,CAWF,GAAE,CAACzB,EAAMjB,IAYV,OACE,gCACE,SAAC,EAAD,CAAWF,iBAPU,SAAAE,IALC,SAAAA,GAExBkC,EADmBlC,EAAQ,CAAEA,MAAAA,GAAU,CAAC,EAEzC,CAGC2C,CAAkB3C,GAClB8B,EAAQ,EACT,MAKMlC,EAAO8B,SAAU,SAACkB,EAAA,EAAD,CAAYhD,OAAQA,MAG7C,C","sources":["components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.jsx","api/getMovies.js","pages/MoviesPage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nconst MovieCard = ({ id, movieName }) => {\n  return (\n    <li>\n      <Link to={`/movies/${id}`}>{movieName}</Link>\n    </li>\n  );\n};\n\nexport default MovieCard;\n","import MovieCard from \"components/MovieCard/MovieCard\";\n\nconst mapMovies = ({ id, title, name }) => <MovieCard key={id} id={id} movieName={title || name} />;\n\nconst MoviesList = ({ movies }) => {\n  return <ul>{movies.map(mapMovies)}</ul>;\n};\n\nexport default MoviesList;","import { useState } from 'react';\n\nconst Searchbar = ({ handleFormSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = ({ currentTarget: { value } }) => setQuery(value);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (!query.trim()) {\n      alert('Query is empty!');\n      return;\n    }\n\n    handleFormSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"query\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        onChange={handleQueryChange}\n        value={query}\n      />\n    </form>\n  );\n};\n\nexport default Searchbar;\n","import axios from 'axios';\n\nconst requestParameters = {\n  api_key: 'a54c3783addcfd6f83ea014e2d49ad26',\n  language: 'en-US',\n  page: 1,\n  query: '',\n  include_adult: false,\n};\n\nasync function getMovies(query, page = 1) {\n  requestParameters.query = query;\n  requestParameters.page = page;\n  const parameters = new URLSearchParams(requestParameters); // Отримує частину url з параметрами\n\n  const response = await axios.get(`search/movie?${parameters}`);\n\n  if (!response.data.results.length) {\n    return Promise.reject(new Error(`No movies by query: ${query}!`));\n  }\n\n  return response.data.results;\n}\n\nexport default getMovies;\n","import MoviesList from 'components/MoviesList/MoviesList';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport { useEffect, useState } from 'react';\nimport getMovies from 'api/getMovies';\nimport { useSearchParams } from 'react-router-dom';\n\nconst MoviesPage = () => {\n  const [page, setPage] = useState(1);\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    const responseResolved = movies => {\n      setMovies(movies);\n    };\n\n    const responseRejected = error => {\n      console.log(error.message);\n    };\n\n    getMovies(query, page).then(responseResolved).catch(responseRejected);\n  }, [page, query]);\n\n  const updateQueryString = query => {\n    const nextParams = query ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  const handleFormSubmit = query => {\n    updateQueryString(query);\n    setPage(1);\n  };\n\n  return (\n    <section>\n      <Searchbar handleFormSubmit={handleFormSubmit} />\n      {!!movies.length && <MoviesList movies={movies} />}\n    </section>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["id","movieName","to","mapMovies","title","name","movies","map","handleFormSubmit","useState","query","setQuery","onSubmit","event","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","onChange","value","currentTarget","requestParameters","api_key","language","page","include_adult","getMovies","parameters","URLSearchParams","axios","response","data","results","length","Promise","reject","Error","setPage","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","then","catch","error","console","log","message","updateQueryString","MoviesList"],"sourceRoot":""}