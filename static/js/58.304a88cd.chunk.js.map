{"version":3,"file":"static/js/58.304a88cd.chunk.js","mappings":"wOAEMA,EAAoB,CACxBC,QAAS,mCACTC,SAAU,QACVC,KAAM,GAGOC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BC,GAA1B,8FAA8BF,EAA9B,+BAAqC,EACnCH,EAAkBG,KAAOA,EACnBG,EAAa,IAAIC,gBAAgBP,GAFzC,SAIyBQ,EAAAA,EAAAA,IAAA,gBAAmBH,EAAnB,oBAAiCC,IAJ1D,cAIQG,EAJR,yBAUSA,EAASC,KAAKC,SAVvB,mEAaA,I,MAAA,EAnBA,SAM0B,GAAXP,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,mBCNTQ,EAAmBC,EAAAA,EAAAA,GAAH,6K,SCetB,EAdmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5B,OACE,UAACH,EAAD,YACE,0BAAI,WAASE,MACb,uBAAIC,MAGT,E,oBCRKC,EAAoBH,EAAAA,EAAAA,GAAH,mFCAjBI,EAAgBJ,EAAAA,EAAAA,EAAH,wFCSnB,EARgB,SAAC,GAAiB,IAAfK,EAAc,EAAdA,QACjB,OAAO,SAACD,EAAD,UAAgBC,GACxB,ECEKC,EAAa,SAAC,GAAD,IAAGd,EAAH,EAAGA,GAAIS,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACjB,SAAC,EAAD,CAEED,OAAQA,EACRC,QAASA,GAFJV,EAFU,EAqCnB,EA3BgB,WACZ,IAAQe,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAcF,OAZEC,EAAAA,EAAAA,YAAU,WASRrB,EAAWgB,GAASM,MARK,SAAAH,GACvBC,EAAWD,EACZ,IAM0CI,OAJlB,SAAAC,GACvBC,QAAQC,IAAIF,EAAMV,QACnB,GAGF,GAAE,CAACE,KAGJ,8BACKG,EAAQQ,QACT,SAACf,EAAD,UAAoBO,EAAQS,IAAIb,MAEhC,SAAC,EAAD,CAASD,QAvBQ,+CA2BxB,C","sources":["api/getReviews.js","components/ReviewItem/ReviewItem.styled.js","components/ReviewItem/ReviewItem.jsx","components/Reviews/Reviews.styled.js","components/Message/Message.styled.js","components/Message/Message.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst requestParameters = {\n  api_key: 'a54c3783addcfd6f83ea014e2d49ad26',\n  language: 'en-US',\n  page: 1,\n};\n\nasync function getReviews(id, page = 1) {\n  requestParameters.page = page;\n  const parameters = new URLSearchParams(requestParameters); // Отримує частину url з параметрами\n\n  const response = await axios.get(`movie/${id}/reviews?${parameters}`);\n\n  // if (!response.data.results.length) {\n  //   return Promise.reject(new Error(`No reviews for movie with id: ${id}!`));\n  // }\n\n  return response.data.results;\n}\n\nexport default getReviews;\n","import styled from '@emotion/styled';\n\nconst ReviewItemStyled = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  padding: 10px;\n\n  width: 100%;\n\n  border: 1px solid #000;\n  border-radius: 8px;\n`;\n\nexport {ReviewItemStyled}\n","import PropTypes from 'prop-types';\nimport { ReviewItemStyled } from './ReviewItem.styled';\n\nconst ReviewItem = ({ author, content }) => {\n  return (\n    <ReviewItemStyled>\n      <h3>Author: {author}</h3>\n      <p>{content}</p>\n    </ReviewItemStyled>\n  );\n};\n\nReviewItem.propTypes = {\n  author: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n};\n\nexport default ReviewItem;\n","import styled from '@emotion/styled';\n\nconst ReviewsListStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport { ReviewsListStyled };\n","import styled from '@emotion/styled';\n\nconst MessageStyled = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport { MessageStyled };\n","import PropTypes from 'prop-types';\nimport { MessageStyled } from './Message.styled';\n\nconst Message = ({ message }) => {\n  return <MessageStyled>{message}</MessageStyled>;\n};\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Message;\n","import getReviews from \"api/getReviews\";\nimport ReviewItem from \"components/ReviewItem/ReviewItem\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ReviewsListStyled } from \"./Reviews.styled\";\nimport Message from \"components/Message/Message\";\n\nconst mapReviews = ({ id, author, content }) => (\n  <ReviewItem\n    key={id}\n    author={author}\n    content={content}\n  />\n);\n\nconst NOREVIEWSMESSAGE = \"We don't have any reviews for this movie!\"\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n      const responseResolved = reviews => {\n        setReviews(reviews);\n      };\n\n      const responseRejected = error => {\n        console.log(error.message);\n      };\n\n      getReviews(movieId).then(responseResolved).catch(responseRejected);\n    }, [movieId]);\n\n  return (\n    <>\n      {!!reviews.length ? (\n        <ReviewsListStyled>{reviews.map(mapReviews)}</ReviewsListStyled>\n      ) : (\n        <Message message={NOREVIEWSMESSAGE} />\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["requestParameters","api_key","language","page","getReviews","id","parameters","URLSearchParams","axios","response","data","results","ReviewItemStyled","styled","author","content","ReviewsListStyled","MessageStyled","message","mapReviews","movieId","useParams","useState","reviews","setReviews","useEffect","then","catch","error","console","log","length","map"],"sourceRoot":""}