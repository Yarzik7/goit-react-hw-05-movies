{"version":3,"file":"static/js/998.f71505d1.chunk.js","mappings":"iNAEMA,EAAkBC,EAAAA,EAAAA,GAAH,oEAIfC,EAAeD,EAAAA,EAAAA,IAAH,gD,SCclB,EAjBkB,SAAC,GAAoC,IAAlCE,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAC9BC,GAAWC,EAAAA,EAAAA,MAEf,OACE,SAACP,EAAD,WACE,UAAC,KAAD,CAAMQ,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMJ,GAA1C,WACE,SAACJ,EAAD,CACES,IAAG,yCAAoCN,GACvCO,IAAKR,KAGP,wBAAKA,QAIZ,EChBKS,EAAkBZ,EAAAA,EAAAA,GAAH,4ECCfa,EAAY,SAAC,GAAD,IAAGX,EAAH,EAAGA,GAAIY,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAMX,EAApB,EAAoBA,YAApB,OAChB,SAAC,EAAD,CAEEF,GAAIA,EACJC,UAAWW,GAASC,EACpBX,YAAaA,GAHRF,EAFS,EAalB,EAJmB,SAAC,GAAgB,IAAdc,EAAa,EAAbA,OACpB,OAAO,SAACJ,EAAD,UAAkBI,EAAOC,IAAIJ,IACrC,C,kFCZKK,EAAgBlB,EAAAA,EAAAA,QAAH,uEAKbmB,EAAqBnB,EAAAA,EAAAA,GAAH,gDCLlBoB,EAAkBpB,EAAAA,EAAAA,IAAH,mI,SCCfqB,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,SAACF,EAAD,UAAkBE,GAApC,ECCZC,EAAU,SAAC,GAAyB,IAAvBD,EAAsB,EAAtBA,SAAUR,EAAY,EAAZA,MAC3B,OACE,SAACI,EAAD,WACE,UAACG,EAAD,WACGP,IAAS,SAACK,EAAD,UAAqBL,IAC9BQ,MAIR,C,oHCXKE,EAAoB,CACxBC,QAAS,oCAKIC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6FACQC,EAAa,IAAIC,gBAAgBJ,GADzC,SAGyBK,EAAAA,EAAAA,IAAA,2BAA8BF,IAHvD,WAGQG,EAHR,QAKgBC,KAAKC,QAAQC,OAL7B,yCAMWC,QAAQC,OAAO,IAAIC,MAAJ,+BAN1B,gCASSN,EAASC,KAAKC,SATvB,kEAFAH,EAAAA,EAAAA,SAAAA,QAAyB,gCAczB,MAdA,WAEeH,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,kCCqBf,EAxBiB,WACf,OAA4CW,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WASRd,IAAce,MARW,SAAAzB,GACvBuB,EAAkBvB,EACnB,IAMoC0B,OAJZ,SAAAC,GACvBC,QAAQC,IAAIF,EAAMG,QACnB,GAGF,GAAE,KAGD,2BACE,SAACvB,EAAA,EAAD,CAAST,MAAM,iBAAf,UACE,SAACiC,EAAA,EAAD,CAAY/B,OAAQsB,OAI3B,C","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesList/MovieList.styled.js","components/MoviesList/MoviesList.jsx","components/Section/Section.styled.js","components/Section/Container/Container.styled.js","components/Section/Container/Container.jsx","components/Section/Section.jsx","api/getTrending.js","pages/HomePage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst MovieCardStyled = styled.li`\n  flex-basis: calc((100% - 3 * 30px) / 4);\n`;\n\nconst PosterStyled = styled.img`\n  margin-bottom: 15px;\n`\n\nexport { MovieCardStyled, PosterStyled };\n","import { Link, useLocation } from 'react-router-dom';\nimport { MovieCardStyled, PosterStyled } from './MovieCard.styled';\n\nconst MovieCard = ({ id, movieName, poster_path }) => {\nconst location = useLocation();\n\n  return (\n    <MovieCardStyled>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <PosterStyled\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt={movieName}\n        />\n\n        <h2>{movieName}</h2>\n      </Link>\n    </MovieCardStyled>\n  );\n};\n\nexport default MovieCard;\n","import styled from '@emotion/styled';\n\nconst MovieListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n\nexport { MovieListStyled };\n","import MovieCard from \"components/MovieCard/MovieCard\";\nimport { MovieListStyled } from \"./MovieList.styled\";\n\nconst mapMovies = ({ id, title, name, poster_path }) => (\n  <MovieCard\n    key={id}\n    id={id}\n    movieName={title || name}\n    poster_path={poster_path}\n  />\n);\n\nconst MoviesList = ({ movies }) => {\n  return <MovieListStyled>{movies.map(mapMovies)}</MovieListStyled>;\n};\n\nexport default MoviesList;","import styled from '@emotion/styled';\n\nconst SectionStyles = styled.section`\n  padding-top: 30px;\n  padding-bottom: 30px;\n`;\n\nconst SectionTitleStyled = styled.h1`\n  margin-bottom: 40px;\n`;\n\nexport { SectionStyles, SectionTitleStyled };\n","import styled from '@emotion/styled';\n\nconst ContainerStyles = styled.div`\n  position: relative;\n  width: 1500px;\n  margin: 0 auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n\nexport { ContainerStyles };\n","import PropTypes from 'prop-types';\nimport { ContainerStyles } from './Container.styled';\n\nconst Container = ({ children }) => <ContainerStyles>{children}</ContainerStyles>;\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport { Container };\n","import PropTypes from 'prop-types';\nimport { SectionStyles, SectionTitleStyled } from './Section.styled';\nimport { Container } from './Container/Container';\n\nconst Section = ({ children, title }) => {\n  return (\n    <SectionStyles>\n      <Container>\n        {title && <SectionTitleStyled>{title}</SectionTitleStyled>}\n        {children}\n      </Container>\n    </SectionStyles>\n  );\n};\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport {Section};","import axios from 'axios';\n\nconst requestParameters = {\n  api_key: 'a54c3783addcfd6f83ea014e2d49ad26',\n};\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nasync function getTrending() {\n  const parameters = new URLSearchParams(requestParameters); // Отримує частину url з параметрами\n\n  const response = await axios.get(`trending/all/day?${parameters}`);\n\n  if (!response.data.results.length) {\n    return Promise.reject(new Error(`No trending movies today!`));\n  }\n\n  return response.data.results;\n}\n\nexport default getTrending;\n","import getTrending from 'api/getTrending';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { Section } from 'components/Section/Section';\nimport { useEffect, useState } from 'react';\n\nconst HomePage = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    const responseResolved = movies => {\n      setTrendingMovies(movies);\n    };\n\n    const responseRejected = error => {\n      console.log(error.message);\n    };\n\n    getTrending().then(responseResolved).catch(responseRejected);\n  }, []);\n\n  return (\n    <main>\n      <Section title=\"Trending today\">\n        <MoviesList movies={trendingMovies} />\n      </Section>\n    </main>\n  );\n};\n\nexport default HomePage;\n"],"names":["MovieCardStyled","styled","PosterStyled","id","movieName","poster_path","location","useLocation","to","state","from","src","alt","MovieListStyled","mapMovies","title","name","movies","map","SectionStyles","SectionTitleStyled","ContainerStyles","Container","children","Section","requestParameters","api_key","getTrending","parameters","URLSearchParams","axios","response","data","results","length","Promise","reject","Error","useState","trendingMovies","setTrendingMovies","useEffect","then","catch","error","console","log","message","MoviesList"],"sourceRoot":""}