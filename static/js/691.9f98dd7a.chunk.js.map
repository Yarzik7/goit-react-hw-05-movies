{"version":3,"file":"static/js/691.9f98dd7a.chunk.js","mappings":"yOAEMA,EAAoB,CACxBC,QAAS,mCACTC,SAAU,SAGNC,EAAU,gCAEDC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAuBC,GAAvB,gFACQC,EAAa,IAAIC,gBAAgBP,GADzC,SAGyBQ,EAAAA,EAAAA,IAAA,UAAaL,EAAb,iBAA6BE,EAA7B,oBAA2CC,IAHpE,cAGQG,EAHR,yBAKSA,EAASC,KAAKC,MALvB,kEAQA,I,IAAA,EAVA,SAEuB,GAARP,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,mBCPTQ,EAAiBC,EAAAA,EAAAA,GAAH,+H,4ECsBpB,EAnBiB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACtC,OACE,UAACJ,EAAD,YACI,gBACEK,IAAKF,EAAY,UAAMG,EAAAA,IAAN,OAAqBH,GAAiBI,EACvDC,IAAKN,KAET,wBAAKA,KACL,0BAAI,cAAYE,OAGrB,E,8BCdKK,EAAiBR,EAAAA,EAAAA,GAAH,4ECMdS,EAAU,SAAC,GAAD,IAAGjB,EAAH,EAAGA,GAAIS,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OAA2C,SAAC,EAAD,CAAmBF,KAAMA,EAAMC,aAAcA,EAAcC,UAAWA,GAAvDX,EAA1D,EA6BhB,EA3Ba,WACT,IAAQkB,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOd,EAAP,KAAae,EAAb,KAcF,OAZEC,EAAAA,EAAAA,YAAU,WASLvB,EAAQmB,GAASK,MARQ,SAAAjB,GACvBe,EAAQf,EACT,IAMuCkB,OAJf,SAAAC,GACvBC,QAAQC,IAAIF,EAAMG,QACnB,GAGL,GAAE,CAACV,KAGJ,8BACKZ,EAAKuB,QACN,SAACb,EAAD,UAAiBV,EAAKwB,IAAIb,MAE1B,SAACc,EAAA,EAAD,CAASH,QAASI,EAAAA,MAIzB,C,sECjCKC,E,QAAgBzB,EAAAA,EAAH,wF,SCSnB,EARgB,SAAC,GAAiB,IAAfoB,EAAc,EAAdA,QACjB,OAAO,SAACK,EAAD,UAAgBL,GACxB,C,wGCLD,IAAMf,EAAe,kCACfqB,EAAmB,4CACnBF,EAAiB,+C","sources":["api/getCast.js","components/CastItem/CastItem.styled.js","components/CastItem/CastItem.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Message/Message.styled.js","components/Message/Message.jsx","constants/constants.js"],"sourcesContent":["import axios from 'axios';\n\nconst requestParameters = {\n  api_key: 'a54c3783addcfd6f83ea014e2d49ad26',\n  language: 'en-US',\n};\n\nconst baseURL = 'https://api.themoviedb.org/3/';\n\nasync function getCast(id) {\n  const parameters = new URLSearchParams(requestParameters); // Отримує частину url з параметрами\n\n  const response = await axios.get(`${baseURL}movie/${id}/credits?${parameters}`);\n\n  return response.data.cast;\n}\n\nexport default getCast;\n","import styled from '@emotion/styled';\n\nconst CastItemStyled = styled.li`\n  flex-basis: calc((100% - 3 * 30px) / 4);\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport { CastItemStyled };\n","import PropTypes from 'prop-types';\nimport { CastItemStyled } from './CastItem.styled';\nimport plugActor from '../../images/plug-actor.png';\nimport { baseImageUrl } from 'constants/constants';\n\nconst CastItem = ({ name, profile_path, character }) => {\n  return (\n    <CastItemStyled>\n        <img\n          src={profile_path ? `${baseImageUrl}${profile_path}` : plugActor}\n          alt={name}\n        />\n      <h3>{name}</h3>\n      <h4>Character: {character}</h4>\n    </CastItemStyled>\n  );\n};\n\nCastItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  profile_path: PropTypes.string,\n  character: PropTypes.string.isRequired,\n};\n\nexport default CastItem;\n","import styled from '@emotion/styled';\n\nconst CastListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n\nexport { CastListStyled };\n","import getCast from \"api/getCast\";\nimport CastItem from \"components/CastItem/CastItem\";\nimport Message from 'components/Message/Message';\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { CastListStyled } from \"./Cast.styled\";\nimport { NOCASTSMESSAGE } from \"constants/constants\";\n\nconst mapCast = ({ id, name, profile_path, character }) => <CastItem key={id} name={name} profile_path={profile_path} character={character} />\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n         const responseResolved = cast => {\n           setCast(cast);\n         };\n\n         const responseRejected = error => {\n           console.log(error.message);\n         };\n\n         getCast(movieId).then(responseResolved).catch(responseRejected);\n    }, [movieId])\n\n  return (\n    <>\n      {!!cast.length ? (\n        <CastListStyled>{cast.map(mapCast)}</CastListStyled>\n      ) : (\n        <Message message={NOCASTSMESSAGE} />\n      )}\n    </>\n  );\n}\n\nexport default Cast;","import styled from '@emotion/styled';\n\nconst MessageStyled = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport { MessageStyled };\n","import PropTypes from 'prop-types';\nimport { MessageStyled } from './Message.styled';\n\nconst Message = ({ message }) => {\n  return <MessageStyled>{message}</MessageStyled>;\n};\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Message;\n","const baseImageUrl = 'https://image.tmdb.org/t/p/w500';\nconst NOREVIEWSMESSAGE = \"We don't have any reviews for this movie!\"\nconst NOCASTSMESSAGE = \"We don't have info about cast for this movie!\";\n\nexport { baseImageUrl, NOREVIEWSMESSAGE, NOCASTSMESSAGE };"],"names":["requestParameters","api_key","language","baseURL","getCast","id","parameters","URLSearchParams","axios","response","data","cast","CastItemStyled","styled","name","profile_path","character","src","baseImageUrl","plugActor","alt","CastListStyled","mapCast","movieId","useParams","useState","setCast","useEffect","then","catch","error","console","log","message","length","map","Message","NOCASTSMESSAGE","MessageStyled","NOREVIEWSMESSAGE"],"sourceRoot":""}